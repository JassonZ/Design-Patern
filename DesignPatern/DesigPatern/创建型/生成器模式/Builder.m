//
//  Builder.m
//  DesignPatern
//
//  Created by Jason on 2019/12/22.
//  Copyright © 2019 Jason. All rights reserved.
//

#import "Builder.h"

@implementation Builder
/**
 客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象；
 每一个具体建造者都相对独立，而与其他的具体建造者无关，因为可以很方便的替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象
 增加新的具体建造者无须修改原有类库代码，指挥者类针对抽象构造者类编程，系统扩展方便，符合开闭原则
 可以更加精细地控制产品的创建过程。将d复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。
 
 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如产品差异很大，则不适合使用建造者模式，因此使用范围受到一定的限制；
 如果产品内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大；
 */

-(void)buildWheel{
    
}
-(void)buildEngine{
    
}
-(void)buildBody{
    
}
@end
